/*
 * Copyright 2017-2023 O2 Czech Republic, a.s.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id "com.github.hierynomus.license" version "0.16.1"
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id "org.sonarqube" version "4.0.0.2929"
}

subprojects {
  apply plugin: 'cz.o2.proxima.java-conventions'
  apply plugin: 'com.github.johnrengelman.shadow'

  license {
    header project.file("license-header.txt")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("gradle", "SLASHSTAR_STYLE")
    mapping("txt", "SCRIPT_STYLE")
    mapping("proto", "SLASHSTAR_STYLE")
    mapping("avsc", "JAVADOC_STYLE")
    mapping("yaml", "SCRIPT_STYLE")
    mapping("conf", "SLASHSTAR_STYLE")
    mapping("cql", "SLASHSTAR_STYLE")
  }

  jar {
    enabled = false
    dependsOn shadowJar
  }

  shadowJar {
    archiveClassifier = null
    dependencies {
      include(project(project.path))
    }
    relocate "com.google.common", "${coreShade}.com.google.common"
  }

  configurations.create("shadowJar") {
    outgoing {
      artifact(shadowJar)
    }
  }

  if (project.hasProperty("publish") || project.hasProperty("release")) {
    java {
      withJavadocJar()
      withSourcesJar()
    }
    javadoc {
      dependsOn compileJava, compileTestJava
      failOnError = false
      if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
      }
    }
    tasks.named("sourcesJar") {
      dependsOn compileJava, compileTestJava
    }

    tasks.named("javadoc") {
      dependsOn compileJava, compileTestJava
    }
    project.publishing.publications.maven.artifact(shadowJar)
    project.publishing.publications.maven.artifact(sourcesJar)
    project.publishing.publications.maven.artifact(javadocJar)
    if (project.hasProperty("release")) {
      apply plugin: "signing"
      signing {
        useGpgCmd()
        publishing.publications.each { signing.sign(it) }
      }
    }
  }

}

sonar {
  properties {
    property "sonar.sourceEncoding", "UTF-8"
    property 'sonar.coverage.jacoco.xmlReportPaths', "${projectDir.path}/build/reports/jacoco/test/jacocoTestReport.xml"
  }
}

if (project.hasProperty("with-coverage")) {
  subprojects {
    apply plugin: 'jacoco'
    jacocoTestReport {
      reports {
        xml.required = true
      }
    }
    test {
      finalizedBy jacocoTestReport
    }
  }
}

