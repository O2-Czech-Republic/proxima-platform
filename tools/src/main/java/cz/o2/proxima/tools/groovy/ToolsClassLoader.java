/**
 * Copyright 2017-2022 O2 Czech Republic, a.s.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.o2.proxima.tools.groovy;

import com.google.common.collect.Sets;
import cz.o2.proxima.tools.groovy.internal.ClassloaderUtils;
import cz.o2.proxima.util.ExceptionUtils;
import groovy.lang.GroovyClassLoader;
import java.net.URI;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.control.CompilationUnit;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.codehaus.groovy.control.SourceUnit;

/** {@link GroovyClassLoader} keeping track of generated bytecode. */
public class ToolsClassLoader extends GroovyClassLoader {

  class Collector extends ClassCollector {

    Collector(InnerLoader cl, CompilationUnit unit, SourceUnit su) {
      super(cl, unit, su);
    }

    @Override
    protected Class<?> createClass(byte[] code, ClassNode classNode) {
      byteCode.put(classNode.getName(), code);
      return super.createClass(code, classNode);
    }
  }

  private final Set<URI> preexistingURLs = new HashSet<>();
  private final Map<String, byte[]> byteCode = new ConcurrentHashMap<>();
  private final CompilerConfiguration conf = ClassloaderUtils.createConfiguration();

  public ToolsClassLoader() {
    super(Thread.currentThread().getContextClassLoader(), ClassloaderUtils.createConfiguration());
    Arrays.stream(getURLs())
        .map(url -> ExceptionUtils.uncheckedFactory(url::toURI))
        .forEach(preexistingURLs::add);
  }

  public CompilerConfiguration getConfiguration() {
    return conf;
  }

  @Override
  protected ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {
    ClassCollector collector = super.createCollector(unit, su);
    return new Collector((InnerLoader) collector.getDefiningClassLoader(), unit, su);
  }

  public Set<String> getDefinedClasses() {
    return new HashSet<>(byteCode.keySet());
  }

  public Set<URI> getAddedURLs() {
    Set<URI> current =
        Arrays.stream(getURLs())
            .map(url -> ExceptionUtils.uncheckedFactory(url::toURI))
            .collect(Collectors.toSet());
    return Sets.difference(current, preexistingURLs);
  }

  public byte[] getClassByteCode(String name) {
    return Objects.requireNonNull(byteCode.get(name));
  }
}
