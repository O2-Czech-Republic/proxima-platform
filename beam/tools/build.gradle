/*
 * Copyright 2017-2023 O2 Czech Republic, a.s.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'cz.o2.proxima.java-conventions'
  alias libs.plugins.protobuf
}

def scala_version = "2.12"
def jackson_version = "2.14.1"

dependencies {
  api project(':proxima-beam-core')
  api project(':proxima-tools')
  api libraries.beam_core
  api libraries.beam_extensions_join_library
  api libraries.beam_extensions_kryo
  intoShadow libraries.grpc_core
  intoShadow libraries.grpc_protobuf
  intoShadow libraries.grpc_stub
  intoShadow libraries.grpc_netty_shaded
  api libraries.slf4j_api
  provided libraries.flink_clients
  testImplementation project(path: ':proxima-core', configuration: 'testsJar')
  testImplementation project(path: ':proxima-direct-core', configuration: 'testsJar')
  testImplementation project(path: ':proxima-tools', configuration: 'testsJar')
  testImplementation libraries.spark_core
  testImplementation libraries.log4j_over_slf4j
  testImplementation libraries.slf4j_log4j
  testImplementation libraries.junit4
  testImplementation libraries.hamcrest
  testImplementation(libraries.beam_runners_flink) {
    exclude group: "org.apache.flink", module: "flink-clients"
    exclude group: "org.apache.flink", module: "flink-runtime"
    exclude group: "org.apache.flink", module: "flink-streaming-java"
    exclude group: "org.apache.flink", module: "flink-optimizer"
  }
  testImplementation libraries.beam_runners_spark
  testImplementation(libraries.spark_core) {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
  }
  testImplementation libraries.spark_streaming
  testImplementation libraries.beam_runners_direct
  compileOnly project(':proxima-direct-core')
  compileOnly libraries.beam_runners_direct
  provided libraries.guava
  compileOnly libraries.beam_runners_flink
  compileOnly libraries.beam_runners_spark
  compileOnly libraries.auto_service_annotations
  compileAnnotationProcessor libraries.lombok
  annotationProcessor libraries.auto_service
}

description = 'cz.o2.proxima:proxima-beam-tools'

configurations.all {
  resolutionStrategy {
    force libraries.guava
    force "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    force "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
    force "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    force "com.fasterxml.jackson.module:jackson-module-paranamer:${jackson_version}"
    force "com.fasterxml.jackson.module:jackson-module-scala_${scala_version}:${jackson_version}"
  }
}

protobuf {
  protoc { artifact = libraries.protoc }
  plugins {
    grpc { artifact = libraries.gen_grpc }
  }
  generateProtoTasks {
    all()*.plugins { grpc {} }
  }
}

shadowJar {
  transform(renamingTransformer()) {
    renameClosure = {
      if (it.startsWith("META-INF/native/libio_grpc_netty_shaded_")) {
        return "META-INF/native/libcz_o2_proxima_beam_tools_shaded_${it.substring(19)}"
      }
      if (it.startsWith("META-INF/native/io_grpc_netty_shaded_")) {
        return "META-INF/native/cz_o2_proxima_beam_tools_shaded_${it.substring(16)}"
      }
    }
  }
  ["io.grpc", "com.google.protobuf"].each {
    relocate it, "cz.o2.proxima.beam.tools.shaded.${it}"
  }
}
