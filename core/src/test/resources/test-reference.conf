{
  entities: {
    event: {
      attributes: {
        data: { scheme: "bytes" }
      }
    }

    gateway: {
      attributes: {
        armed: { scheme: bytes }
        users: { scheme: bytes }
        status: { scheme: bytes }

        # the following defines a pattern for attributes
        # each attribute that matches the pattern is treated the same
        "device.*": { scheme: bytes }

        # settings for specific rule
        "rule.*": { scheme: bytes }

        # this is fake attribute that always fails validation
        fail: { scheme: "fail:whenever" }

        bytes: { scheme: bytes }
        metric: { scheme: float }
      }
    }

    dummy: {
      attributes: {
        data: { scheme: bytes }
        "wildcard.*": { scheme: "bytes" }
      }
    }

    batch {
      from: dummy
    }

    proxied {

      attributes {
        # this is "protected" field and should not be accessed directly
        "_e.*": { scheme: bytes }

        "raw.*": { scheme: bytes }

        "ints.*" { scheme: integer }

        "dummy": { scheme: bytes }

        # this is proxy public attribute performing transformation
        "event.*": {
          proxy: "_e.*"
          apply: cz.o2.proxima.transform.EventTransform
        }

        # this is asymmetric proxy attribute
        # with different transformations on read and write
        # e.g. the attribute has to have storage for reading
        # but writes are transformed to another attribute
        # typical use-case: replication
        "asymmetric.*": {
          proxy {
            write {
              into: "_e.*"
              apply: cz.o2.proxima.transform.WriteProxy
            }
            read {
              from: "raw.*"
              apply: cz.o2.proxima.transform.ReadProxy
            }
          }
        }

        # applied explicit scheme
        "schemeAsymmetric.*" {
          proxy {
            write {
              into: "_e.*"
              apply: cz.o2.proxima.transform.WriteProxy
            }
            read {
              from: "ints.*"
              apply: cz.o2.proxima.transform.ReadProxy
            }
          }
          # need explicit scheme
          scheme: float
        }

        # attribute with one-side proxy transformation
        "writeAsymmetric.*" {
          proxy {
            write {
              into: "_e.*"
              apply: cz.o2.proxima.transform.WriteProxy
            }
          }
          # when the attribute has only single-side transformation
          # it has to have scheme (because it is regular attribute also
          # by itself)
          scheme: bytes
        }

        # this is just to validate parsing
        differentScheme {
          proxy: dummy
          scheme: integer
          apply: cz.o2.proxima.transform.EventTransform
        }
      }

    }

    replica {
      from: gateway
    }

  }

  attributeFamilies: {
    event-storage-stream: {
      entity: event
      attributes: [ data ]
      # this is testing only storage
      storage: "inmem:///proxima_events"
      type: primary
      access: commit-log
    }

    event-storage-bulk {
      entity: event
      attributes: [ data ]
      storage: "inmem-bulk:///proxima_events/bulk"
      type: replica
      access: [ write-only ]
      filter: cz.o2.proxima.util.DummyFilter
    }

    gateway-storage-stream: {
      entity: gateway
      attributes: [ "*" ]
      storage: "inmem:///proxima_gateway"
      type: primary
      access: [ commit-log, cached-view, random-access ]
    }

    gateway-storage-batch: {
      entity: gateway
      attributes: [ "*" ]
      storage: "inmem:///proxima_gateway_batch"
      type: replica
      access: [ batch-snapshot, batch-updates ]
    }

    dummy-storage: {
      entity: dummy
      attributes: [ "*" ]
      storage: "inmem:///proxima/dummy"
      type: primary
      access: [ commit-log, random-access ]
    }

    dummy-storage-bulk: {
      entity: dummy
      attributes: [ "*" ]
      storage: "inmem-bulk:///proxima/dummy-bulk"
      type: replica
      access: batch-updates
    }

    batch-storage {
      entity: batch
      attributes: [ "*" ]
      storage: "inmem:///proxima/batch"
      type: primary
      access: batch-updates
    }

    proxy-primary {
      entity: proxied
      attributes: [ "_e.*" ]
      storage: "inmem:///proxima/proxy"
      type: primary
      access: [ commit-log, random-access, cached-view, batch-snapshot, list-primary-key ]
    }

    # this is family that will be remove, but has to be accessible by name
    proxy-event-storage {
      entity: proxied
      attributes: ["event.*"]
      storage: "inmem:///proxima/proxy/event"
      type: primary
      access: commit-log
    }

    raw-storage {
      entity: proxied
      attributes: [ "raw.*" ]
      storage: "inmem:///proxima/raw"
      type: primary
      access: [ commit-log, random-access ]
    }

    proxied-other-storage {
      entity: proxied
      attributes: [ "dummy", "ints.*" ]
      storage: "inmem:///proxima/proxied-dummy"
      type: primary
      access: [ commit-log, random-access ]
    }

    writeAsymmetric-read-storage {
      entity: proxied
      attributes: [ "writeAsymmetric.*" ]
      storage: "inmem:///proxima/writeAsymmetric"
      type: primary
      access: [ commit-log, random-access, read-only ]
    }

    replica-storage {
      entity: replica
      attributes: [ "*" ]
      storage: "inmem:///proxima/replica"
      type: primary
      access: commit-log
    }

    event-data-storage-with-suffix {
      entity: event
      attributes: [ data ]
      # this is testing only storage
      storage: "inmem:///proxima_events-with-suffix"
      type: replica
      access: commit-log
      replication.consumer.name.suffix: "-my-suffix"
      transformer.consumer.name.suffix: "-my-suffix"
    }

  }

  transformations {
    event-data-to-dummy-wildcard {
      entity: event
      attributes: [ "data" ]
      using: cz.o2.proxima.transform.EventDataToDummy
      # this is default, but add it to test parsing
      filter: cz.o2.proxima.util.DummyFilter
    }

    disabled {
      entity: event
      attributes: [ "data" ]
      using: cz.o2.proxima.transform.EventDataToDummy
      # this is default, but add it to test parsing
      filter: cz.o2.proxima.storage.PassthroughFilter
      disabled: true
    }

  }

}

